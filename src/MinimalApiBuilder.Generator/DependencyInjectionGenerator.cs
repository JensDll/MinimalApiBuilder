using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

// <auto-generated>
// This file was generated by a tool.
// </auto-generated>
namespace MinimalApiBuilder.Generator
{
    [Generator]
    public class DependencyInjectionGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context) { }

        public void Execute(GeneratorExecutionContext context)
        {
            StringBuilder sourceBuilder = CreateStringBuilder();
            sourceBuilder.AppendLine("namespace MinimalApiBuilder");
            sourceBuilder.AppendLine("{");
            sourceBuilder.AppendLine("    public static class DependencyInjection");
            sourceBuilder.AppendLine("    {");
            sourceBuilder.AppendLine(
                "        public static IServiceCollection AddMinimalApiBuilderEndpointsGen(this IServiceCollection services)");
            sourceBuilder.AppendLine("        {");

            foreach (ISymbol symbol in GetEndpointSymbols(context))
            {
                sourceBuilder.Append(' ', 12);
                sourceBuilder.AppendLine($"services.AddScoped<{symbol}>();");
            }

            sourceBuilder.Append(' ', 12);
            sourceBuilder.AppendLine("return services;");

            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine("    }");
            sourceBuilder.AppendLine("}");

            context.AddSource("DependencyInjection.generated.cs", sourceBuilder.ToString());
        }

        private static IEnumerable<ISymbol> GetEndpointSymbols(GeneratorExecutionContext context)
        {
            foreach (SyntaxTree tree in context.Compilation.SyntaxTrees)
            {
                SemanticModel model = context.Compilation.GetSemanticModel(tree);

                foreach (ClassDeclarationSyntax classDeclaration in
                         tree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>())
                {
                    if (classDeclaration.BaseList == null)
                    {
                        continue;
                    }

                    foreach (BaseTypeSyntax baseType in classDeclaration.BaseList.Types)
                    {
                        if (!(baseType.Type is GenericNameSyntax genericName) ||
                            genericName.Identifier.Text != "Endpoint")
                        {
                            continue;
                        }

                        Debug.Assert(genericName.TypeArgumentList.Arguments.Count == 1);

                        SymbolInfo symbolInfo =
                            model.GetSymbolInfo(genericName.TypeArgumentList.Arguments[0],
                                context.CancellationToken);

                        if (symbolInfo.Symbol != null)
                        {
                            yield return symbolInfo.Symbol.OriginalDefinition;
                        }
                    }
                }
            }
        }

        private static StringBuilder CreateStringBuilder() =>
            new StringBuilder(@"// <auto-generated>
// This is a MinimalApiBuilder auto generated file.
// </auto-generated>
");
    }
}
