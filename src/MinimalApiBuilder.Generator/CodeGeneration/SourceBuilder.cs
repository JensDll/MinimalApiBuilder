using System.Text;
using Microsoft.CodeAnalysis;

namespace MinimalApiBuilder.Generator.CodeGeneration;

internal abstract class SourceBuilder
{
    private const int IndentSize = 4;

    private readonly StringBuilder _builder = new(@"#nullable enable

// <auto-generated>
// This is a MinimalApiBuilder source generated generated file.
// </auto-generated>

");

    private int _indent;

    protected SourceBuilder(params string[] usingStatements)
    {
        foreach (string usingStatement in usingStatements)
        {
            _builder.AppendLine($"using {usingStatement};");
        }

        _builder.AppendLine();
    }

    protected OpenBlockResult OpenBlock(string value)
    {
        WriteBlockStart(value);
        return new OpenBlockResult(this);
    }

    protected OpenBlockResult OpenBlock(string value, string afterClose)
    {
        WriteBlockStart(value);
        return new OpenBlockResult(this, afterClose);
    }

    protected void AppendLine(string value)
    {
        _builder.Append(' ', _indent);
        _builder.AppendLine(value);
    }

    public abstract void AddSource(SourceProductionContext context);

    public override string ToString() => _builder.ToString();

    private void IncreaseIndent()
    {
        _indent += IndentSize;
    }

    private void DecreaseIndent()
    {
        _indent -= IndentSize;
    }

    private void WriteBlockStart(string value)
    {
        _builder.Append(' ', _indent);
        _builder.AppendLine(value);
        _builder.Append(' ', _indent);
        _builder.AppendLine("{");
        IncreaseIndent();
    }

    protected readonly struct OpenBlockResult : IDisposable
    {
        private readonly SourceBuilder _builder;
        private readonly string? _afterClose;

        public OpenBlockResult(SourceBuilder builder)
        {
            _builder = builder;
        }

        public OpenBlockResult(SourceBuilder builder, string afterClose)
        {
            _builder = builder;
            _afterClose = afterClose;
        }

        public void Dispose()
        {
            _builder.DecreaseIndent();
            _builder.AppendLine(string.IsNullOrEmpty(_afterClose) ? "}" : $"}}{_afterClose}");
        }
    }
}
